

#include <stdio.h>
#include <stdlib.h>
#include<time.h>
#define MAX_SIZE 100
#define SWAP(x,y,t) ( (t) = (x), (x)=(y), (y)=(t))

int list[100];
int n;
int sorted[100];
void selsort(int list[], int n) {
    int i, j, least, temp;
    for (i = 0; i < n - 1; i++) {
        least = i;
        for (j = i + 1; j < n; j++) {
            if (list[j] < list[least])
                least = j;
        }
        SWAP(list[i], list[least], temp);
    }
}

void insort(int list[], int n) {
    int i, j, key;
    for (i = 0; i < n; i++) {
        key = list[i];
        for (j = i - 1; j >= 0 && list[j] > key; j--) {
            list[j + 1] = list[j];
        }
        list[j + 1] = key;
    }
}

void busort(int list[], int n) {
    int i, j, temp;
    for (i = n - 1; i > 0; i--) {
        for (j = 0; j < i; j++)
            if (list[j] > list[j + 1])
                SWAP(list[j], list[j + 1], temp);
    }
}

void merge(int list[], int left, int mid, int right) {
    int i, j, k, l;
    i = left; j = mid + 1; k = left;

    while (i <= mid && j <= right) {
        if (list[i] <= list[j]) {
            sorted[k++] = list[i++];
        }
        else
        {
            sorted[k++] = list[j++];
        }
    }
    if (i > mid)
        for (l = j; l <= right; l++)
            sorted[k++] = list[l];
    else
        for (l = i; l <= mid; l++)
            sorted[k++] = list[l];
    for (l = left; l <= right; l++)
        list[l] = sorted[l];
}

void mergesort(int list[], int left, int right) {
    int mid;
    if (left < right) {
        mid = (left + right) / 2;
        mergesort(list, left, mid);
        mergesort(list, mid + 1, right);
        merge(list, left, mid, right);
    }
}

int main()
{
    int i;
    
    n = MAX_SIZE;
    srand(time(NULL));
    for (i = 0; i < n; i++) {
        list[i] = rand() % 100;
        for (int i_1 = 0; i_1 < i; i_1++) {
            if (list[i] == list[i_1]) {
                i--;
                break;
            }
        }
    }
    

    printf("선택 소트\n");
    selsort(list, n);
    for (i = 0; i < n; i++) {
        printf("%d ", list[i]);
    }
    printf("\n");
    for (i = 0; i < n; i++) {
        list[i] = rand() % 100;
        for (int i_1 = 0; i_1 < i; i_1++) {
            if (list[i] == list[i_1]) {
                i--;
                break;
            }
        }
    }
    printf("삽입 소트\n");
    insort(list, n);
    for (i = 0; i < n; i++) {
        printf("%d ", list[i]);
    }
    printf("\n");
    for (i = 0; i < n; i++) {
        list[i] = rand() % 100;
        for (int i_1 = 0; i_1 < i; i_1++) {
            if (list[i] == list[i_1]) {
                i--;
                break;
            }
        }
    }
    

    printf("버블 소트\n");
    busort(list, n);
    for (i = 0; i < n; i++) {
        printf("%d ", list[i]);
    }
    printf("\n");
    for (i = 0; i < n; i++) {
        list[i] = rand() % 100;
        for (int i_1 = 0; i_1 < i; i_1++) {
            if (list[i] == list[i_1]) {
                i--;
                break;
            }
        }
    }
    
 
    printf("합병 소트\n");
    mergesort(list, 0, n - 1);
    for (i = 0; i < n; i++) {
        printf("%d ", list[i]);
    }
    printf("\n");

}
