#include<stdio.h>
#include<stdlib.h>
#define size 5

typedef int element;
typedef struct {
    int front;
    int rear;
    element data[size];
}Queuetype;

void error(char*message)
{
    fprintf(stderr, "%s\n", message);
    exit(1);
}

void init_queue(Queuetype*q)
{
    q->rear=0;
    q->front=-0;
}

int is_empty(Queuetype*q)
{
    return(q->front == q->rear);
}

int is_full(Queuetype*q)
{
    return((q->rear + 1)%size==q->front);
}

void queue_print(Queuetype*q)
{
    printf("Queue(front=%d rear=%d)=", q->front, q->rear);
    if(!is_empty(q)){
        int i=q->front;
        do{
            i=(i+1)%(size);
            printf("%d|", q->data[i]);
            if(i==q->rear)
                break;
        }while(i!=q->front);
    
    }
    printf("\n");
}

void enqueue(Queuetype*q, element item)
{
    if (is_full(q))
    error("큐가 포화상태입니다.");
    q->rear=(q->rear+1)%size;
    q->data[q->rear]=item;
}

element dequeue(Queuetype*q)
{
    if(is_empty(q))
    error("큐가 공백상태입니다.");
    q->front=(q->front+1)%size;
    return q->data[q->front];
}

int main(void)
{
    Queuetype queue;
    int element;
    
    init_queue(&queue);
    printf("--데이터 추가 단게--\n");
    while(!is_full(&queue))
    {
        printf("정수를 입력하시오:");
        scanf("%d", &element);
        enqueue(&queue, element);
        queue_print(&queue);
    }
    printf("큐는 포화상태입니다.\n\n");
    
    printf("--데이터 삭제 단계--\n");
    while (!is_empty(&queue))
    {
        element=dequeue(&queue);
        printf("꺼내진 정수 : %d \n", element);
        queue_print(&queue);
    }
    printf("큐는 공백상태입니다\n");
    return 0;
}

