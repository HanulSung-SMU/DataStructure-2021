#include <stdio.h>
#include <stdlib.h>

typedef int element;
typedef struct ListNode {
	element data;
	struct ListNode* link;
}ListNode;

ListNode* insert_first(ListNode* head, element data) // 맨 처음 위치에 노드를 삽입하는 함수
{
	ListNode* node = (ListNode*)malloc(sizeof(ListNode)); // 새로운 노드의 공간 할당
	node->data = data;
	if (head == NULL) { // 노드가 없을 경우
		head = node;
		node->link = head; // 새로운 노드가 자기 자신을 가리키도록 함
	}
	else { // 리스트가 있을 경우
		node->link = head->link; // 새로운 노드는 헤더가 가리키던 값을 가리키게 하고
		head->link = node; // 헤더는 새로운 노드를 가리키게 함
	}
	return head;
}

ListNode* insert_last(ListNode* head, element data) // 맨 마지막 위치에 노드를 삽입하는 함수
{
	ListNode* node = (ListNode*)malloc(sizeof(ListNode)); // 새로운 노드의 공간 할당
	node->data = data;
	if (head == NULL) { // 노드가 없을 경우
		head = node;
		node->link = head;
	}
	else { // 노드가 있을 경우
		node->link = head->link;
		head->link = node; 
		head = node; // 추가로 헤더를 새로운 리스트로 설정
	}
	return head;
}

void print_list(ListNode* head) // 리스트 출력 함수
{
	ListNode* p;

	if (head == NULL) return;
	p = head->link;
	do {
		printf("%d->", p->data);
		p = p->link;
	} while (p != head);
	printf("%d->", p->data);
	printf("\n");
}

void traverse(ListNode* head, element item) // 리스트 검사 함수
{
	ListNode* p;
	int locate = 1;

	if (head == NULL) { // 노드가 없을 경우
		printf("리스트가 없음\n");
		return;
	}

	p = head->link;
	do {
		if (p->data == item) {
			printf("%d 값이 %d번째에 존재합니다.\n", item, locate);
			return;
		}
		p = p->link;
		locate += 1;
	} while (p != head); // p의 위치를 바꿔가며 item과 같은 값이 존재하는지 확인
	if (p->data == item) {
		printf("%d 값이 %d번째에 존재합니다.\n", item, locate); // 마지막 남은 값이 item과 같은지 확인
	}
	else {
		printf("%d 값은 존재하지 않습니다.\n", item);
	}
}

int main(void)
{
	ListNode* head = NULL;

	head = insert_last(head, 20);
	head = insert_last(head, 30);
	head = insert_last(head, 40);
	head = insert_first(head, 10);
	print_list(head);
	traverse(head, 20);

	return 0;
}
