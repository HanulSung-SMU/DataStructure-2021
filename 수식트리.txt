#include <stdio.h>
#include <stdlib.h>
#include <memory.h>

typedef struct TreeNode {
    int data;
    struct TreeNode* left, * right;
} TreeNode;

TreeNode n1 = { 10, NULL, NULL };
TreeNode n2 = { 20, NULL, NULL };
TreeNode n3 = { '*', &n1, &n2 };
TreeNode* root1 = &n3;

TreeNode a1 = { 10, NULL, NULL };
TreeNode a2 = { 0, NULL, NULL };
TreeNode a3 = { 0, NULL, NULL };
TreeNode a4 = { '+', &a2, &a3 };
TreeNode a5 = { 20, NULL, NULL };
TreeNode a6 = { 30, NULL, NULL };
TreeNode a7 = { '*', &a5, &a6 };
TreeNode a8 = { '-', &a1, &a7 };
TreeNode* root2 = &a8;

TreeNode b1 = { 10, NULL, NULL };
TreeNode b2 = { 20, NULL, NULL };
TreeNode b3 = { '<', &b1, &b2 };
TreeNode b4 = { 30, NULL, NULL };
TreeNode b5 = { 40, NULL, NULL };
TreeNode b6 = { '>', &b4, &b5 };
TreeNode b7 = { '|', &b3, &b6 };
TreeNode* root3 = &b7;

int evaluate(TreeNode* root) {
    if (root == NULL)
        return 0;
    if (root->left == NULL && root->right == NULL)
        return root->data;
    else {
        int ab1 = evaluate(root->left);
        int ab2 = evaluate(root->right);
        printf("%d %c %d을 계산합니다. ", ab1, root->data, ab2);
        switch (root->data) {
        case '+':
            return ab1 + ab2;
        case '-':
            return ab1 - ab2;
        case '*':
            return ab1 * ab2;
        case '|':
            return ab1 || ab2;
        case '<':
            return (((ab1) < (ab2)) ? (ab2) : 0);
        case '>':
            return (((ab1) > (ab2)) ? (ab1) : 0);
        }
    }
    return 0;
}

int main(void) {
    printf("첫번째 수식의 값: %d. \n\n", evaluate(root1));
    printf("두번째 수식의 값은 %d. \n\n", evaluate(root2));
    printf("세번째 수식의 값은 %d. \n", evaluate(root3));
    return 0;
}
