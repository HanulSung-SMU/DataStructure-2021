#include <stdio.h>
#include <stdlib.h>

typedef struct ListNode 
{
    int coef;
    int expon;
    struct ListNode* link;
}ListNode;

typedef struct ListType 
{
    int size;
    ListNode* head;
    ListNode* tail;
}ListType;

//에러 함수
void error(char* message)
{
    fprintf(stderr, "%s\n", message);
    exit(1);
}

//리스트 헤더 생성 함수
ListType* create()
{
    ListType* plist = (ListType*)malloc(sizeof(ListType));
    plist->size = 0;
    plist->head = plist->tail = NULL;
    return plist;
}

void insert_last(ListType* plist, int coef, int expon)
{
    ListNode* temp = (ListNode*)malloc(sizeof(ListNode));
    if (temp == NULL) error("메모리 할당 에러");
    temp->coef = coef;
    temp->expon = expon;
    temp->link = NULL;
    if (plist->tail == NULL) 
    {
        plist->head = plist->tail = temp;
    }
    else 
    {
        plist->tail->link = temp;
        plist->tail = temp;
    }
    plist->size++;
}

//다항식 덧셈 함수
void poly_add(ListType* plist1, ListType* plist2, ListType* plist3)
{
    ListNode* a = plist1->head;
    ListNode* b = plist2->head;
    int sum;

    while (a && b) 
    {
        if (a->expon == b->expon) 
        {
            sum = a->coef + b->coef;
            if (sum != 0) insert_last(plist3, sum, a->expon);
            a = a->link; b = b->link;
        }
        else if (a->expon > b->expon) 
        {
            insert_last(plist3, a->coef, a->expon);
            a = a->link;
        }
        else 
        {
            insert_last(plist3, b->coef, b->expon);
            b = b->link;
        }
    }

    for ( ; a != NULL; a = a->link)
        insert_last(plist3, a->coef, a->expon);
    for ( ; b != NULL; b = b->link)
        insert_last(plist3, b->coef, b->expon);
}

//출력 함수
void poly_print(ListType* plist)
{
    ListNode* p = plist->head;
    printf("polynomial = ");
    for (; p; p = p->link) 
    {
        printf("%d^%d + ", p->coef, p->expon);
    }
    printf("\n");
}

int main(void)
{
    ListType* list1, * list2, * list3;

    list1 = create();
    list2 = create();
    list3 = create();

    //다항식1 생성
    insert_last(list1, 3, 12);
    insert_last(list1, 2, 8);
    insert_last(list1, 1, 0);
    //다항식2 생성
    insert_last(list2, 8, 12);
    insert_last(list2, -4, 10);
    insert_last(list2, 10, 6);
    //다항식1,2 출력
    poly_print(list1);
    poly_print(list2);
    printf("++++++++++++++++++++++++++++++++++++++++++++++++++++++++\n");

    //다항식3(다항식1 + 다항식2) 출력
    poly_add(list1, list2, list3);
    poly_print(list3);
    printf("\n");

    //할당 해제
    free(list1); free(list2); free(list3);

}
